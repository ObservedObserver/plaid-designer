{"version":3,"sources":["canvas/slopLine.ts","canvas/mask.tsx","canvas/horizontal.tsx","canvas/vertical.tsx","bot/grid.ts","bot/gridFuncs.ts","bot/utils.ts","store/colordb.ts","store/store.tsx","utils.ts","designer/index.tsx","components/page.tsx","designer/init.tsx","components/colorScheme.tsx","components/colorPool.tsx","components/parse.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["slopeLine","interceptY","width","height","x","y","graph","inty1","inty2","maxX2","Math","min","maxY2","minX2","max","minY2","maxX1","maxY1","minX1","minY1","push","MaskLayer","props","pixSize","maskMat","useMemo","scale","line","map","pos","getMaskMatrix","pathList","matrix","path","join","i","length","maskMatrix2PathList","id","key","d","fill","HorizontalGroup","segments","seg","end","start","color","VerticalGroup","mask","generateGrids","size","gridFunc","grids","func","PI","gridFuncs","name","round","random","abs","sin","sqrt","exp","sortColor","colors","iforest","Ensemble","IsolationForest","colorVecs","c","chroma","hcl","fit","scores","anomalyScore","sort","a","b","s","ColorDB","cs","COLOR_POOL","COLOR_POOL2","gridList","sortedList","orderMap","Map","forEach","n","set","relu","colorGridsAutoD","floor","get","initStore","commonStore","colorGrids","colorSchemeIndex","colorSchemePool","this","cdb","slice","makeAutoObservable","observable","ref","index","splice","colorScheme","gridCount","gridFuncIndex","console","log","toJS","raw","JSON","parse","totalSize","colorPool","gridSize","sum","colorGrid2Segment","StoreContext","React","createContext","StoreWrapper","Provider","value","children","useGlobalStore","useContext","ColorBlock","styled","div","observer","sizeHandler","useCallback","setGridSize","colorHandler","setGridColor","deleteItem","deleteGrid","addItem","addGrid","editGrids","tableCols","title","dataIndex","render","grid","step","onChange","v","Number","Option","DeleteOutlined","onClick","style","marginBottom","type","pagination","bordered","dataSource","columns","scroll","PageHeader","PageContainer","useState","setGridCount","setGridFuncIndex","onSubmit","init","aria-label","gf","ColorContainer","ColorScheme","setColorSchemeIndex","scheme","sIndex","text","setText","marginTop","g","TextArea","e","target","parseGrids","ObCore","svgContainer","useRef","dllink","previewCanvas","svgFile","setSvgFile","preview","setPreview","exportPNG","current","content","btoa","innerHTML","img","Image","src","onload","ctx","getContext","drawImage","SIZE","download","encodeURIComponent","togglePreview","useEffect","click","className","Item","span","version","xmlns","marginLeft","display","href","visible","onOk","onCancel","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d1c7aea.chunk.js","sourcesContent":["import { Pos } from '../interfaces';\n\nexport function slopeLine(interceptY: number, width: number, height: number): Pos[] {\n    const graph: Pos[] = [];\n    // y1 = x + ity\n    // y1 growth = [1, 0]\n    // y2 = x + ity + 1\n    // y2 growth = [0, 1]\n    const inty1 = interceptY;\n    const inty2 = interceptY + 1;\n    // ity >=0 , x from 0.\n    const maxX2 = Math.min(width, height - inty2);\n    const maxY2 = Math.min(height, width + inty2);\n    const minX2 = Math.max(0, -inty2);\n    const minY2 = Math.max(0, inty2);\n\n    const maxX1 = Math.min(width, height - inty1);\n    const maxY1 = Math.min(height, width + inty1);\n    const minX1 = Math.max(0, -inty1);\n    const minY1 = Math.max(0, inty1);\n    let x, y;\n    for (x = minX2, y = minY2; x <= maxX2 && y<= maxY2; x++) {\n        y = x + inty2;\n        if (y <= maxY2 && y >= minY2) {\n            graph.push([x, y]);\n        }\n        if (y + 1 <= maxY2 && y + 1 >= minY2) {\n            graph.push([x, y + 1]);\n        }\n    }\n    for (let x = maxX1, y = maxY1; x >=minX1 && y >= minY1; x--) {\n        y = x + inty1;\n        if (y <= maxY1 && y >= minY1) {\n            graph.push([x, y]);\n        }\n        if (y - 1 <= maxY1 && y - 1 >= minY1) {\n            graph.push([x, y - 1])\n        }\n    }\n    return graph;\n}\n\nexport function translate(graph: Pos[], offset: Pos): Pos[] {\n    return graph.map(p => [p[0] + offset[0], p[1] + offset[1]])\n}\n\nexport function getMaskMatrix(width: number, height: number, scale: number = 1) {\n    const graph: Pos[][] = [];\n    for (let y = -width; y <= height; y += 4) {\n        const line = slopeLine(y, width, height);\n        graph.push(line.map(pos => [pos[0] * scale, pos[1] * scale]));\n    }\n\n    return graph;\n}\n\nexport function maskMatrix2PathList(matrix: Pos[][]): string[] {\n    const pathList: string[] = [];\n    for (let line of matrix) {\n        let path = `M ${line[0].join(' ')} `;\n        for (let i = 1; i < line.length; i++) {\n            path += `L ${line[i].join(' ')} `;\n        }\n        path += 'Z';\n        pathList.push(path);\n    }\n    return pathList;\n}","import React, { useMemo } from 'react';\nimport { getMaskMatrix, maskMatrix2PathList } from './slopLine';\nconst PIX_SIZE = 5;\ninterface MaskLayerProps {\n    width: number;\n    height: number;\n    pixSize: number;\n}\nconst MaskLayer: React.FC<MaskLayerProps> = props => {\n    const { width, height, pixSize } = props;\n    const maskMat = useMemo(() => {\n        return getMaskMatrix(width, height, pixSize);\n    }, [width, height, pixSize])\n\n    const pathList = useMemo(() => {\n        return maskMatrix2PathList(maskMat);\n    }, [maskMat])\n    \n    return (\n        <defs>\n            <mask id=\"Mask\">\n                {pathList.map((path, i) => (\n                    <path key={i} d={path} fill=\"white\"></path>\n                ))}\n            </mask>\n        </defs>\n    );\n}\n\nexport default MaskLayer;\n","import React from 'react';\nimport { ColorSegment } from '../interfaces';\n\ninterface HorProps {\n    segments: ColorSegment[];\n}\nconst HorizontalGroup: React.FC<HorProps> = props => {\n    const { segments } = props;\n    return <g>\n        {\n            segments.map((seg, i) => <rect key={i} width=\"100%\" x=\"0\" height={seg.end - seg.start} y={seg.start} fill={seg.color} />)\n        }\n    </g>\n}\n\nexport default HorizontalGroup;\n","import React from 'react';\nimport { ColorSegment } from '../interfaces';\n\ninterface VerProps {\n    segments: ColorSegment[];\n}\nconst VerticalGroup: React.FC<VerProps> = props => {\n    const { segments } = props;\n    return (\n        <g>\n            {segments.map((seg, i) => (\n                <rect\n                    key={i}\n                    height=\"100%\"\n                    y=\"0\"\n                    width={seg.end - seg.start}\n                    x={seg.start}\n                    fill={seg.color}\n                    mask=\"url(#Mask)\"\n                />\n            ))}\n        </g>\n    );\n}\n\nexport default VerticalGroup;\n","import { IGridFunc } from \"./gridFuncs\";\n\nexport function generateGrids (size: number, gridFunc: IGridFunc): number[] {\n    const grids: number[] = [];\n    for (let x = 0; x < size; x++) {\n        const y = gridFunc.func(x, size);\n        // const y = (0.8 + (Math.random()) * 0.2) * 8 * Math.abs(Math.sin(2 * Math.PI / (2 * size) * x + Math.PI * (1 - 0.618))) + 2 * Math.random() + 5;\n        grids.push(y);\n    }\n    return grids;\n}\n","export interface IGridFunc {\n    name: string;\n    func: (x: number, size?: number) => number;\n}\n\nconst PI = Math.PI;\n\nexport const gridFuncs: IGridFunc[] = [\n    {\n        name: 'sin-extended',\n        func: (x, size = 1) => Math.round(((0.8 + (Math.random()) * 0.2) * 8 * Math.abs(Math.sin(2 * PI / (2 * size) * x + PI * (1 - 0.618))) + 2 * Math.random() + 5) ** 4)\n    },\n    {\n        name: 'normal-extended',\n        func: (x, size = 1) => (1 / (Math.sqrt(2 * PI) * size / 4)) * Math.exp(-1 * (x - size / 6 -  Math.random()) ** 2 / ( 2 * size / 4) ** 2)\n    }\n]","import chroma from 'chroma-js';\nimport { Ensemble } from '@kanaries/ml';\n// import { Neighbors } from '@kanaries/ml'\n// export convertColor2\n\nexport function sortColor (colors: string[]): string[] {\n    const iforest = new Ensemble.IsolationForest();\n    const colorVecs: number[][] = colors.map(c => chroma(c).hcl());\n    iforest.fit(colorVecs)\n    const scores: [string, number][] = [];\n    for (let i = 0; i < colors.length; i++) {\n        scores.push([colors[i], iforest.anomalyScore(colorVecs[i])]);\n    }\n    scores.sort((a, b) => a[1] - b[1]);\n    return scores.map(s => s[0]);\n}","export const ColorDB: string[][] = [\n    ['555b6e', '89b0ae', 'bee3db', 'faf9f9', 'ffd6ba'],\n    ['2d3142', '4f5d75', 'bfc0c0', 'ffffff', 'ef8354'],\n    ['d8e2dc', 'ffffff', 'ffcad4', 'f4acb7', '9d8189'],\n    ['b8d8ba', 'd9dbbc', 'fcddbc', 'ef959d', '69585f'],\n    ['ffcdb2', 'ffb4a2', 'e5989b', 'b5838d', '6d6875'],\n    ['05668d', '028090', '00a896', '02c39a', 'f0f3bd'],\n    ['fe938c', 'e6b89c', 'ead2ac', '9cafb7', '4281a4'],\n].map((cs) => cs.map((c) => '#' + c));","import { makeAutoObservable, observable, toJS } from \"mobx\";\nimport React, { useContext } from \"react\";\nimport { generateGrids } from \"../bot/grid\";\nimport { gridFuncs } from \"../bot/gridFuncs\";\nimport { sortColor } from \"../bot/utils\";\nimport { ColorGrid } from \"../interfaces\";\nimport { colorGrid2Segment } from \"../utils\";\nimport { ColorDB } from \"./colordb\";\nconst COLOR_POOL: string[] = [\n    '#644e2d',\n    '#f8ea7e',\n    '#e69214',\n    '#3f3dd6',\n    '#f5f1d2'\n];\n\nconst COLOR_POOL2: string[] = [\n    '#e63946',\n    '#f1faee',\n    '#a8dadc',\n    '#457b9d',\n    '#1d3557',\n];\nconst gridList = generateGrids(18, gridFuncs[0]);\nconst sortedList = [...gridList].sort((a, b) => a - b);\nconst orderMap: Map<number, number> = new Map();\nsortedList.forEach((n, i) => {\n    orderMap.set(n, i);\n})\nconst relu = (x: number) => Math.max(0, x)\n\nconst colorGridsAutoD: ColorGrid[] = gridList.map((n, i) => ({\n    size: n,\n    color: Math.floor((1 - orderMap.get(n)! / orderMap.size) * 5 + relu(Math.sin(Math.PI * 2 / 4 * i)) + 5) % 5\n}));\n\nclass GlobalStore {\n    public colorGrids: ColorGrid[] = [];\n    // public colorPool: string[] = [];\n    public colorSchemeIndex: number = 0;\n    public colorSchemePool: string[][] = [];\n    constructor () {\n        this.colorGrids = colorGridsAutoD;\n        // this.colorPool = COLOR_POOL2;\n        this.colorSchemeIndex = 0;\n        this.colorSchemePool = [\n            sortColor(COLOR_POOL),\n            sortColor(COLOR_POOL2),\n            ...ColorDB.map(cdb => sortColor(cdb)).slice(0, 2),\n            // COLOR_POOL,\n            // COLOR_POOL2,\n        ]\n        makeAutoObservable(this, {\n            colorSchemePool: observable.ref\n        });\n    }\n    public get colorScheme () {\n        return this.colorSchemePool[this.colorSchemeIndex]\n    }\n    public get segments () {\n        return colorGrid2Segment(this.colorGrids, 400, this.colorScheme);\n    }\n    public setColorSchemeIndex (index: number) {\n        this.colorSchemeIndex = index;\n    }\n    public setGridSize (size: number, index: number) {\n        this.colorGrids[index].size= size;\n    }\n    public setGridColor (color: number, index: number) {\n        this.colorGrids[index].color = color;\n    }\n    public deleteGrid (index: number) {\n        this.colorGrids.splice(index, 1);\n    }\n    public addGrid () {\n        this.colorGrids.push({\n            size: Math.round(Math.random() * 40) + 10,\n            color: Math.round(Math.random() * this.colorScheme.length - 1) \n        })\n    }\n    public init (gridCount: number, gridFuncIndex: number) {\n        const gridList = generateGrids(gridCount, gridFuncs[gridFuncIndex]);\n        const sortedList = [...gridList].sort((a, b) => a - b);\n        const orderMap: Map<number, number> = new Map();\n        sortedList.forEach((n, i) => {\n            orderMap.set(n, i);\n        })\n        const colorGridsAutoD: ColorGrid[] = gridList.map((n, i) => ({\n            size: n,\n            color: Math.floor((1 - orderMap.get(n)! / orderMap.size) * 5 + relu(Math.sin(Math.PI * 2 / 4 * i)) + 5) % 5\n        }));\n        console.log(toJS(colorGridsAutoD))\n        console.log(gridList)\n        this.colorGrids = colorGridsAutoD;\n    }\n    public parseGrids (raw: string) {\n        this.colorGrids = JSON.parse(raw);\n    }\n}\n\nconst initStore: {\n    commonStore: GlobalStore;\n} = {\n    commonStore: new GlobalStore()\n}\n\nconst StoreContext = React.createContext<{\n    commonStore: GlobalStore;\n}>(initStore);\n\nexport const StoreWrapper: React.FC = props => {\n    return <StoreContext.Provider value={initStore}>\n        { props.children }\n    </StoreContext.Provider>\n}\n\nexport function useGlobalStore() {\n    return useContext(StoreContext);\n}","import { ColorGrid, ColorSegment } from \"./interfaces\";\n\nexport function colorGrid2Segment (grids: ColorGrid[], totalSize: number, colorPool: string[]): ColorSegment[] {\n    let gridSize = 0, sum = 0;\n    for (let i = 0; i < grids.length; i++) {\n        gridSize += grids[i].size;\n    }\n    const segments: ColorSegment[] = [];\n    for (let i = 0; i < grids.length; i++) {\n        segments.push({\n            start: sum * totalSize / gridSize,\n            end: (sum + grids[i].size) * totalSize / gridSize,\n            color: colorPool[grids[i].color % colorPool.length]\n        })\n        sum += grids[i].size\n    }\n    return segments;\n}","import { Select, Button, InputNumber, Table } from 'antd';\nimport React, { useCallback, useMemo } from 'react';\nimport { ColorGrid } from '../interfaces';\nimport styled from 'styled-components';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport { observer } from 'mobx-react-lite';\nimport { useGlobalStore } from '../store/store';\nimport { toJS } from 'mobx';\n\ninterface DesignerProps {\n    // colorGrids: ColorGrid[];\n    // colorPool: string[];\n    // updater: IUpdater;\n}\n\nconst ColorBlock = styled.div<{color: string}>`\n    width: 14px;\n    height: 14px;\n    margin: 4px;\n    background-color: ${props => props.color};\n`;\n\nconst Designer: React.FC<DesignerProps> = props => {\n    const { commonStore } = useGlobalStore();\n    // const { colorGrids, colorPool, updater } = props;\n    const { colorGrids, colorScheme } = commonStore;\n    const sizeHandler = useCallback((value: number, index: number) => {\n        commonStore.setGridSize(value, index)\n    }, [commonStore]);\n    const colorHandler = useCallback((value: number, index: number) => {\n        commonStore.setGridColor(value, index)\n    }, [commonStore])\n    const deleteItem = useCallback((index: number) => {\n        commonStore.deleteGrid(index)\n    }, [commonStore])\n    const addItem = useCallback(() => {\n        commonStore.addGrid();\n    }, [commonStore])\n\n    const editGrids = toJS(colorGrids).map((c, i) => {\n        return {\n            ...c,\n            key: i\n        }\n    })\n\n    const tableCols = useMemo(() => {\n        return [\n            {\n                title: '大小',\n                dataIndex: 'size',\n                key: 'size',\n                width: 40,\n                render(value: any, grid: ColorGrid, index: number) {\n                    return (\n                        <InputNumber\n                            min={0}\n                            step={1}\n                            value={grid.size}\n                            onChange={(v) => {\n                                sizeHandler(Number(v), index);\n                            }}\n                        />\n                    );\n                },\n            },\n            {\n                title: '颜色',\n                dataIndex: 'color',\n                key: 'color',\n                width: 30,\n                render (value: any, grid: ColorGrid, index: number) {\n                    return (\n                        <Select\n                            value={grid.color}\n                            onChange={(v) => {\n                                colorHandler(v, index);\n                            }}\n                        >\n                            {colorScheme.map((c, i) => (\n                                <Select.Option key={c} value={i}>\n                                    <ColorBlock color={c} />\n                                </Select.Option>\n                            ))}\n                        </Select>\n                    );\n                }\n            },\n            {\n                title: '编辑',\n                key: 'edit',\n                width: 30,\n                render (value: any, grid: ColorGrid, index: number) {\n                    return <DeleteOutlined onClick={() => { deleteItem(index) }} />;\n                }\n\n            }\n        ];\n    }, [colorHandler, sizeHandler, colorScheme, deleteItem])\n    return (\n        <div>\n            <div style={{ marginBottom: '1em' }}>\n                <Button type=\"primary\" onClick={addItem}>\n                    添加条纹\n                </Button>\n            </div>\n            <div>\n                <Table\n                    pagination={false}\n                    bordered\n                    size=\"small\"\n                    dataSource={editGrids}\n                    columns={tableCols}\n                    scroll={{ y: 550 }}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default observer(Designer);\n","import styled from 'styled-components';\n\nexport const PageHeader = styled.div`\n    box-shadow: 0px 3px 12px 4px rgba(0, 0, 0, 0.12);\n`;\n\nexport const PageContainer = styled.div`\n    padding: 2em 2em;\n`;\n","import { InputNumber, Button, Select } from 'antd';\nimport { observer } from 'mobx-react-lite';\nimport React, { useCallback, useState } from 'react';\nimport { generateGrids } from '../bot/grid';\nimport { gridFuncs } from '../bot/gridFuncs';\nimport { ColorGrid } from '../interfaces';\nimport { IGS } from '../store/index';\nimport { useGlobalStore } from '../store/store';\n\nconst relu = (x: number) => Math.max(0, x)\n\ninterface InitPanelProps {\n    onInit: (callback: (state: IGS) => void) => void;\n}\nconst InitPanel: React.FC = props => {\n    const { commonStore } = useGlobalStore();\n    const [gridCount, setGridCount] = useState<number>(18);\n    const [gridFuncIndex, setGridFuncIndex] = useState<number>(0);\n    const onSubmit = useCallback(() => {\n        commonStore.init(gridCount, gridFuncIndex);\n    }, [gridCount, gridFuncIndex, commonStore])\n    return (\n        <div>\n            <InputNumber\n                aria-label=\"grid-count\"\n                value={gridCount}\n                onChange={(v) => {\n                    setGridCount(Number(v));\n                }}\n            />\n            <InputNumber\n                aria-label=\"grid-func\"\n                value={gridFuncIndex}\n                onChange={(v) => {\n                    setGridFuncIndex(Number(v));\n                }}\n            />\n            <Select value={gridFuncIndex} onChange={v => { setGridFuncIndex(Number(v)); }}>\n                {gridFuncs.map((gf, index) => (\n                    <Select.Option value={index} key={gf.name}>{gf.name}</Select.Option>\n                ))}\n            </Select>\n            <Button type=\"primary\" onClick={onSubmit}>\n                 Submit or Refresh\n            </Button>\n        </div>\n    );\n}\n\nexport default observer(InitPanel);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ColorContainer = styled.div`\n    display: flex;\n    height: 28px;\n    width: 360px;\n    padding: 4px;\n`;\n\nconst ColorBlock = styled.div<{ color: string }>`\n    flex-grow: 1;\n    background-color: ${ props => props.color };\n`\n\ninterface ColorSchemeProps {\n    colorPool: string[];\n}\nconst ColorScheme: React.FC<ColorSchemeProps> = props => {\n    const { colorPool } = props;\n    return <ColorContainer>\n        {\n            colorPool.map(color => <ColorBlock key={color} color={color} />) \n        }\n    </ColorContainer>\n}\n\nexport default ColorScheme;\n","import { Select } from 'antd';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { useGlobalStore } from '../store/store';\nimport ColorScheme from './colorScheme';\n\nconst ColorPool: React.FC = props => {\n    const { commonStore } = useGlobalStore();\n    const { colorSchemeIndex, colorSchemePool } = commonStore;\n    return <div style={{ marginBottom: '1em' }}>\n        <Select\n            value={colorSchemeIndex}\n            onChange={(v) => {\n                commonStore.setColorSchemeIndex(v)\n            }}\n        >\n            {colorSchemePool.map(\n                (scheme, sIndex) => (\n                    <Select.Option\n                        key={sIndex}\n                        value={sIndex}\n                    >\n                        <ColorScheme colorPool={scheme} />\n                    </Select.Option>\n                )\n            )}\n        </Select>\n    </div>\n}\n\nexport default observer(ColorPool);","import { Button, Input } from 'antd';\nimport { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react';\nimport { useGlobalStore } from '../store/store';\n\nconst ParseSegment: React.FC = props => {\n    const { commonStore } = useGlobalStore();\n    const [text, setText] = useState<string>('[{\"color\": 1, \"size\": 12}]');\n\n    return <div style={{ marginTop: '2em' }}>\n        <code>\n            gridSizeList = [{commonStore.colorGrids.map(g => g.size).join(',\\n')}]\n            <br />\n            color = [{commonStore.colorScheme.join(',\\n')}]\n        </code>\n        <h2>自定义grid信息</h2>\n        <Input.TextArea value={text} onChange={(e) => {\n            setText(e.target.value)\n        }}>\n        </Input.TextArea>\n        <Button style={{ marginTop: '1em' }} onClick={() => {\n            commonStore.parseGrids(text);\n        }}>提交</Button>\n    </div>\n}\n\nexport default observer(ParseSegment);","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport MaskLayer from './canvas/mask';\nimport HorizontalGroup from './canvas/horizontal';\nimport VerticalGroup from './canvas/vertical';\nimport Designer from './designer/index';\nimport { PageHeader, PageContainer } from './components/page';\n// import { GSContext, useStore } from './store';\nimport { useGlobalStore, StoreWrapper } from './store/store'\nimport { Button, Menu, Row, Col,  Modal } from 'antd';\nimport './App.css';\nimport InitPanel from './designer/init';\nimport { observer } from 'mobx-react-lite';\nimport ColorPool from './components/colorPool';\nimport ParseSegment from './components/parse';\n\nconst SIZE = 400;\nfunction Core() {\n\tconst svgContainer = useRef<HTMLDivElement>(null);\n\tconst dllink = useRef<HTMLAnchorElement>(null);\n\tconst previewCanvas = useRef<HTMLCanvasElement>(null);\n\t// const [gState, gStateUpdater] = useStore();\n    const { commonStore } = useGlobalStore();\n\tconst [svgFile, setSvgFile] = useState<string>('');\n\tconst [preview, setPreview] = useState<boolean>(false);\n\n\tconst { segments } = commonStore;\n\n\t// const segments = useMemo<ColorSegment[]>(() => {\n    //     return colorGrid2Segment(gState.colorGrids, SIZE, colorScheme);\n\t// }, [gState.colorGrids, colorScheme]);\n\n\tconst exportPNG = useCallback(() => {\n\t\t// debugger\n        if (svgContainer.current) {\n            const content =\n                'data:image/svg+xml;base64,' +\n                btoa(svgContainer.current.innerHTML);\n            const img = new Image();\n\t\t\timg.src = content;\n\t\t\timg.width = SIZE;\n\t\t\timg.height = SIZE;\n\t\t\timg.onload = () => {\n\t\t\t\tconsole.log('content', content);\n                if (previewCanvas.current) {\n                    const ctx = previewCanvas.current.getContext('2d');\n                    if (ctx) {\n\t\t\t\t\t\tctx.drawImage(img, 0, 0, SIZE / 2, SIZE / 2);\n\t\t\t\t\t\tctx.drawImage(img, 0, SIZE / 2, SIZE / 2, SIZE / 2);\n\t\t\t\t\t\tctx.drawImage(img, SIZE / 2, 0, SIZE / 2, SIZE / 2);\n\t\t\t\t\t\tctx.drawImage(img, SIZE / 2, SIZE / 2, SIZE / 2, SIZE / 2);\n                    }\n                }\n\t\t\t}\n        }\n\t}, []);\n\t\n\tconst download = useCallback(() => {\n\t\tif (svgContainer.current) {\n\t\t\tconst content =\n                'data:application/octet-stream,' +\n                encodeURIComponent(svgContainer.current.innerHTML);\n\t\t\tsetSvgFile(content)\n\t\t}\n\t}, [])\n\n    \n    // const generateGrid = useCallback(() => {\n    //     gStateUpdater(state => {\n    //         state.colorGrids = gridList.map((n, i) => ({\n    //             size: n,\n    //             color:\n    //                 Math.floor(\n    //                     (1 - orderMap.get(n)! / orderMap.size) * 5 +\n    //                         relu(Math.sin(((Math.PI * 2) / 4) * i)) +\n    //                         5\n    //                 ) % 5,\n    //         }));\n    //     })\n    // }, [])\n\n\tconst togglePreview = useCallback(() => {\n\t\tsetPreview(v => {\n\t\t\tif (!v) {\n\t\t\t\texportPNG();\n\t\t\t}\n\t\t\treturn !v;\n\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (dllink.current && svgFile !== '') {\n            dllink.current.click();\n        }\n\t}, [svgFile])\n\n\treturn (\n        <div className=\"App\">\n            <PageHeader>\n                <Menu>\n                    <Menu.Item>Plaid Designer</Menu.Item>\n                </Menu>\n            </PageHeader>\n            <PageContainer>\n                <Row>\n                    <Col span={16}>\n                        <ColorPool />\n                        <div ref={svgContainer}>\n                            <svg\n                                version=\"1.1\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                style={{\n                                    width: `${SIZE}px`,\n                                    height: `${SIZE}px`,\n                                }}\n                            >\n                                <MaskLayer\n                                    width={SIZE}\n                                    height={SIZE}\n                                    pixSize={2}\n                                />\n                                <g>\n                                    <HorizontalGroup segments={segments} />\n                                    <VerticalGroup segments={segments} />\n                                </g>\n                            </svg>\n                        </div>\n                        <div>\n                            <InitPanel />\n                        </div>\n                        <div>\n                            <Button type=\"primary\" onClick={download}>\n                                下载svg文件\n                            </Button>\n                            <Button style={{ marginLeft: '4px' }} onClick={togglePreview}>预览</Button>\n                            <a\n                                style={{ display: 'none' }}\n                                download=\"skirt-plaid-pattern.svg\"\n                                ref={dllink}\n                                href={svgFile}\n                            >\n                                download\n                            </a>\n                        </div>\n                        <div>\n                        <ParseSegment />\n                        </div>\n                    </Col>\n                    <Col span={8}>\n                        <Designer />\n                    </Col>\n                </Row>\n            </PageContainer>\n            <Modal\n                title=\"预览\"\n                visible={preview}\n                onOk={togglePreview}\n                onCancel={togglePreview}\n            >\n\t\t\t\t<canvas width={SIZE} height={SIZE} ref={previewCanvas}></canvas>\n                {/* <svg style={{ width: `${SIZE}px`, height: `${SIZE}px` }}>\n                    <MaskLayer width={SIZE} height={SIZE} pixSize={2} />\n                    <g transform=\"scale(0.5, 0.5)\">\n                        <HorizontalGroup segments={segments} />\n                        <VerticalGroup segments={segments} />\n                    </g>\n                    <g transform={`translate(0, ${SIZE / 2}) scale(0.5, 0.5)`}>\n                        <HorizontalGroup segments={segments} />\n                        <VerticalGroup segments={segments} />\n                    </g>\n                    <g transform={`translate(${SIZE / 2}, 0) scale(0.5, 0.5)`}>\n                        <HorizontalGroup segments={segments} />\n                        <VerticalGroup segments={segments} />\n                    </g>\n                    <g\n                        transform={`translate(${SIZE / 2}, ${\n                            SIZE / 2\n                        }) scale(0.5, 0.5)`}\n                    >\n                        <HorizontalGroup segments={segments} />\n                        <VerticalGroup segments={segments} />\n                    </g>\n                </svg> */}\n            </Modal>\n        </div>\n    );\n}\n\nconst ObCore = observer(Core);\nfunction App() {\n    return (\n        <StoreWrapper>\n            <ObCore />\n        </StoreWrapper>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}